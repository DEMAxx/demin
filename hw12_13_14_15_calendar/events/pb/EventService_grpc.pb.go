// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/EventService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Events_EventCreate_FullMethodName    = "/events.Events/EventCreate"
	Events_EventUpdate_FullMethodName    = "/events.Events/EventUpdate"
	Events_EventRemove_FullMethodName    = "/events.Events/EventRemove"
	Events_EventWeekList_FullMethodName  = "/events.Events/EventWeekList"
	Events_EventMonthList_FullMethodName = "/events.Events/EventMonthList"
)

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	EventCreate(ctx context.Context, in *EventCreateRequest, opts ...grpc.CallOption) (*EventCreateResponse, error)
	EventUpdate(ctx context.Context, in *EventUpdateRequest, opts ...grpc.CallOption) (*EventUpdateResponse, error)
	EventRemove(ctx context.Context, in *EventRemoveRequest, opts ...grpc.CallOption) (*EventRemoveResponse, error)
	EventWeekList(ctx context.Context, in *EventWeekListRequest, opts ...grpc.CallOption) (*EventWeekListResponse, error)
	EventMonthList(ctx context.Context, in *EventMonthListRequest, opts ...grpc.CallOption) (*EventMonthListResponse, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) EventCreate(ctx context.Context, in *EventCreateRequest, opts ...grpc.CallOption) (*EventCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventCreateResponse)
	err := c.cc.Invoke(ctx, Events_EventCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) EventUpdate(ctx context.Context, in *EventUpdateRequest, opts ...grpc.CallOption) (*EventUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventUpdateResponse)
	err := c.cc.Invoke(ctx, Events_EventUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) EventRemove(ctx context.Context, in *EventRemoveRequest, opts ...grpc.CallOption) (*EventRemoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventRemoveResponse)
	err := c.cc.Invoke(ctx, Events_EventRemove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) EventWeekList(ctx context.Context, in *EventWeekListRequest, opts ...grpc.CallOption) (*EventWeekListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventWeekListResponse)
	err := c.cc.Invoke(ctx, Events_EventWeekList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) EventMonthList(ctx context.Context, in *EventMonthListRequest, opts ...grpc.CallOption) (*EventMonthListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventMonthListResponse)
	err := c.cc.Invoke(ctx, Events_EventMonthList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility.
type EventsServer interface {
	EventCreate(context.Context, *EventCreateRequest) (*EventCreateResponse, error)
	EventUpdate(context.Context, *EventUpdateRequest) (*EventUpdateResponse, error)
	EventRemove(context.Context, *EventRemoveRequest) (*EventRemoveResponse, error)
	EventWeekList(context.Context, *EventWeekListRequest) (*EventWeekListResponse, error)
	EventMonthList(context.Context, *EventMonthListRequest) (*EventMonthListResponse, error)
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventsServer struct{}

func (UnimplementedEventsServer) EventCreate(context.Context, *EventCreateRequest) (*EventCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventCreate not implemented")
}
func (UnimplementedEventsServer) EventUpdate(context.Context, *EventUpdateRequest) (*EventUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventUpdate not implemented")
}
func (UnimplementedEventsServer) EventRemove(context.Context, *EventRemoveRequest) (*EventRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventRemove not implemented")
}
func (UnimplementedEventsServer) EventWeekList(context.Context, *EventWeekListRequest) (*EventWeekListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventWeekList not implemented")
}
func (UnimplementedEventsServer) EventMonthList(context.Context, *EventMonthListRequest) (*EventMonthListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventMonthList not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}
func (UnimplementedEventsServer) testEmbeddedByValue()                {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	// If the following call pancis, it indicates UnimplementedEventsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_EventCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).EventCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_EventCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).EventCreate(ctx, req.(*EventCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_EventUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).EventUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_EventUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).EventUpdate(ctx, req.(*EventUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_EventRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).EventRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_EventRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).EventRemove(ctx, req.(*EventRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_EventWeekList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventWeekListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).EventWeekList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_EventWeekList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).EventWeekList(ctx, req.(*EventWeekListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_EventMonthList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventMonthListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).EventMonthList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_EventMonthList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).EventMonthList(ctx, req.(*EventMonthListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EventCreate",
			Handler:    _Events_EventCreate_Handler,
		},
		{
			MethodName: "EventUpdate",
			Handler:    _Events_EventUpdate_Handler,
		},
		{
			MethodName: "EventRemove",
			Handler:    _Events_EventRemove_Handler,
		},
		{
			MethodName: "EventWeekList",
			Handler:    _Events_EventWeekList_Handler,
		},
		{
			MethodName: "EventMonthList",
			Handler:    _Events_EventMonthList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/EventService.proto",
}
